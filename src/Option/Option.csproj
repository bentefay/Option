<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFrameworks>netstandard1.0</TargetFrameworks>
    <Version>3.0.3</Version>
    <PackageId>Option.Netstandard</PackageId>
    <Title>Option.Netstandard</Title>
    <Description>
      An Option type for C# (retargeted for netstandard).
      Forked from https://github.com/tejacques/Option.
      Visit https://github.com/bentefay/Option for documentation.
    </Description>
    <Authors>Tom Jacques</Authors>
    <PackageLicenseUrl>https://github.com/bentefay/Option/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/bentefay/Option/</PackageProjectUrl>
    <PackageReleaseNotes>
      Version Release Notes:

      Version 3.0.2:
      - Fix target to netstandard1.0

      Version 3.0.1:
      - Fix target to .NET 3.5

      Version 3.0.0:
      - Breaking Changes:
      - Option is now a struct (value type).
      - Option now no longer has subclasses None and Some (since it is a struct)
      - Namespace changed from System.Option to Functional.Option
      - Implicit Conversion from Option&lt;T&gt; to &lt;T&gt; has been removed.
      - Option now implements IEnumerable&lt;T&gt;
      - ToOption() extension method added for regular and Nullable types.
      - Pattern matching is now a function call in the form:
      option.Match(
      None: () =&gt; { /* Action when the Option is None */ },
      Some: value =&gt; { /* Action when the Option is Some&lt;T&gt; */ });

      var result = option.Match(
      None: () =&gt; "None",
      Some: value =&gt; value.ToString());
    </PackageReleaseNotes>
    <PackageTags>Option Some None Maybe Functional Optional</PackageTags>
  </PropertyGroup>

</Project>
